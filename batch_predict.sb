#!/bin/bash --login
#SBATCH --job-name=OnionNet2
#SBATCH --time=1:00:00
#SBATCH --cpus-per-task=1
#SBATCH --gpus=h200:1
#SBATCH --mem=8G
#SBATCH --array=0-3
#SBATCH --output=slurm-%A_%a.out
#SBATCH --error=slurm-%A_%a.err

set -euo pipefail

module purge
module load Miniforge3
module load CUDA/12.4.0

source "$(conda info --base)/etc/profile.d/conda.sh"
conda activate onionnet2

INPUT_CSV=/mnt/research/woldring_lab/Members/Eaves/plip-plop/index/PDBbind_v2020_core.csv  # Format: dataset,pdb_id,resolution,release_year,target,ligand_name

MODE="${1:-single}"  # "single" with inferred index, or "all"
if [[ "${MODE}" == "all" && -z "${SLURM_JOB_ID:-}" ]]; then
  echo "[local] running all rows in a loop"
  # Skip header, iterate lines with a counter i starting at 0
  tail -n +2 "$INPUT_CSV" | nl -ba -w1 -s, | while IFS=, read -r i line; do
    pdb_id="$(awk -F',' '{gsub(/\r/,"",$2); print tolower($2)}' <<< "${line}")"
    echo "[local i=$((i-1))] pdb_id='${pdb_id}'  python=$(which python)"
    python3 batch_predict_cli.py --pdb_id "${pdb_id}" --n_poses 100
  done
  exit 0
fi


TASK_INDEX="${SLURM_ARRAY_TASK_ID:-${1:-0}}"   # default to 0 if not provided
# Pull CSV row: header is row 1, so add 2
line="$(sed -n "$((TASK_INDEX + 2))p" "$INPUT_CSV" || true)"
if [[ -z "${line}" ]]; then
  echo "No CSV line for index ${TASK_INDEX} â€” nothing to do."
  exit 0
fi

pdb_id="$(awk -F',' '{gsub(/\r/,"",$2); print tolower($2)}' <<< "${line}")"

echo "[idx=${TASK_INDEX}] using python: $(which python)"
python -c "import sys; print('python exe:', sys.executable)"
echo "[idx=${TASK_INDEX}] pdb_id='${pdb_id}'"
python3 batch_predict_cli.py --pdb_id "${pdb_id}" --n_poses 100